#pragma once

#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <vector>
#include <functional>
#include "core/module_manager.h"

struct Vulnerability {
    String cve;
    String description;
    String severity; // "Critical", "High", "Medium", "Low"
    String affected_systems;
    String exploit_code;
    bool verified;
    uint32_t timestamp;
};

struct NetworkHost {
    String ip;
    String mac;
    String hostname;
    std::vector<int> open_ports;
    std::vector<String> services;
    String os_fingerprint;
    bool is_vulnerable;
};

class VulnerabilityScannerModule : public IModule {
private:
    String targetIP;
    String targetURL;
    std::vector<Vulnerability> vulnerabilities;
    std::vector<NetworkHost> hosts;
    bool isRunning;
    
    // Vulnerability databases
    struct VulnDB {
        String cve;
        String description;
        String severity;
        String affected_services;
        String exploit_code;
        String detection_method;
    };
    
    std::vector<VulnDB> vulnDatabase;
    
    void loadVulnerabilityDatabase();
    bool checkWebVulnerabilities();
    bool checkNetworkVulnerabilities();
    bool checkServiceVulnerabilities();
    bool checkOSVulnerabilities();
    
    // Specific vulnerability checks
    bool checkSQLInjection(String url);
    bool checkXSS(String url);
    bool checkDirectoryTraversal(String url);
    bool checkCommandInjection(String url);
    bool checkFileUpload(String url);
    bool checkAuthenticationBypass(String url);
    bool checkSessionManagement(String url);
    bool checkInputValidation(String url);
    bool checkCryptographicIssues(String url);
    bool checkInsecureDirectObjectReferences(String url);
    
    // Network vulnerability checks
    bool checkOpenPorts();
    bool checkWeakEncryption();
    bool checkDefaultCredentials();
    bool checkMisconfigurations();
    bool checkOutdatedServices();
    
    // Service-specific checks
    bool checkSSHVulnerabilities();
    bool checkFTPVulnerabilities();
    bool checkHTTPVulnerabilities();
    bool checkSMTPVulnerabilities();
    bool checkDNSVulnerabilities();
    bool checkSNMPVulnerabilities();
    
    String getServiceVersion(String service, int port);
    String getOSFingerprint();
    String getWebServerInfo();
    String getDatabaseInfo();
    
    void updateDisplay();
    
public:
    VulnerabilityScannerModule();
    ~VulnerabilityScannerModule();
    
    const char* getName() const override { return "vulnerability_scanner"; }
    void setup() override;
    void loop() override;
    
    // Configuration
    void setTarget(String ip);
    void setTargetURL(String url);
    void setScanType(String type); // "web", "network", "all"
    
    // Scanning operations
    bool startScan();
    void stopScan();
    bool isScanning() { return isRunning; }
    
    // Results
    std::vector<Vulnerability> getVulnerabilities() { return vulnerabilities; }
    std::vector<NetworkHost> getHosts() { return hosts; }
    int getVulnerabilityCount() { return vulnerabilities.size(); }
    int getCriticalCount();
    int getHighCount();
    int getMediumCount();
    int getLowCount();
    
    // Specific vulnerability scanning
    bool scanWebApplication(String url);
    bool scanNetworkServices(String ip);
    bool scanDatabase(String ip, int port);
    bool scanWebServer(String url);
    
    // Exploitation
    bool exploitVulnerability(Vulnerability vuln);
    String generateExploit(Vulnerability vuln);
    bool verifyVulnerability(Vulnerability vuln);
    
    // Callbacks
    std::function<void(Vulnerability vuln)> onVulnerabilityFound;
    std::function<void(int progress)> onProgress;
    std::function<void()> onScanComplete;
    
    // Display integration
    void drawStatus();
    void drawResults();
    void printResults();
};
