#include "pentest_web_interface_module.h"
#include <LittleFS.h>

// WebSocket holder for broadcasting events
static AsyncWebSocket* g_ws = nullptr;

// Simple helper for building JSON responses
static String jsonStatus(const char* status, const char* msg = "", const char* key = nullptr, const char* val = nullptr) {
  StaticJsonDocument<256> doc;
  doc["status"] = status;
  if (msg && *msg) doc["message"] = msg;
  if (key && val) doc[key] = val;
  String out; serializeJson(doc, out); return out;
}

PentestWebInterfaceModule::PentestWebInterfaceModule()
  : server(nullptr), dnsServer(nullptr), isRunning(false), apSSID("EAGLE-Pentest"), apPassword("") {
  apIP = IPAddress(192, 168, 4, 1);
  portScanner = nullptr;
  vulnScanner = nullptr;
}

PentestWebInterfaceModule::~PentestWebInterfaceModule() {
  stop();
}

void PentestWebInterfaceModule::setup() {
  begin(true);
}

void PentestWebInterfaceModule::loop() {
  if (dnsServer) dnsServer->processNextRequest();
}

bool PentestWebInterfaceModule::begin(bool apMode) {
  if (isRunning) return true;

  if (apMode) {
    WiFi.mode(WIFI_AP);
    WiFi.softAP(apSSID.c_str(), apPassword.length() ? apPassword.c_str() : nullptr);
    WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));

    dnsServer = new DNSServer();
    dnsServer->start(53, "*", apIP);
  }

  server = new AsyncWebServer(8081);

  // Root UI (lightweight)
  server->on("/", HTTP_GET, [this](AsyncWebServerRequest* request) {
    request->send(200, "text/html", getMainPage());
  });

  // Basic pages (placeholders)
  server->on("/portscan", HTTP_GET, [this](AsyncWebServerRequest* request) {
    request->send(200, "text/html", getPortScanPage());
  });
  server->on("/vulnscan", HTTP_GET, [this](AsyncWebServerRequest* request) {
    request->send(200, "text/html", getVulnScanPage());
  });

  // API
  setupAPI();

  // Static files from LittleFS (optional mini UI under /ui)
  server->serveStatic("/ui", LittleFS, "/").setDefaultFile("index.html");

  // WebSocket for realtime updates
  setupWebSocket();

  server->begin();
  isRunning = true;

  // Attach progress callbacks if scanners are present
  if (portScanner) {
    portScanner->onProgress = [this](int p) { updatePortScanProgress(p, "running"); };
    portScanner->onPortScanned = [this](int port, String status) {
      StaticJsonDocument<128> doc; doc["event"] = "port"; doc["port"] = port; doc["status"] = status; String out; serializeJson(doc, out); sendWebSocketMessage(out);
    };
    portScanner->onScanComplete = [this]() { updatePortScanProgress(100, "done"); };
  }
  if (vulnScanner) {
    vulnScanner->onProgress = [this](int p) { updateVulnScanProgress(p, "running"); };
    vulnScanner->onVulnerabilityFound = [this](Vulnerability v) { addVulnerability(v); };
    vulnScanner->onScanComplete = [this]() { updateVulnScanProgress(100, "done"); };
  }

  return true;
}

void PentestWebInterfaceModule::stop() {
  if (server) { server->end(); delete server; server = nullptr; }
  if (dnsServer) { dnsServer->stop(); delete dnsServer; dnsServer = nullptr; }
  isRunning = false;
}

void PentestWebInterfaceModule::setAPCredentials(String ssid, String password) {
  apSSID = ssid; apPassword = password;
}

void PentestWebInterfaceModule::setAPIP(IPAddress ip) { apIP = ip; }

void PentestWebInterfaceModule::setPortScanner(PortScannerModule* scanner) { portScanner = scanner; }
void PentestWebInterfaceModule::setVulnScanner(VulnerabilityScannerModule* scanner) { vulnScanner = scanner; }

String PentestWebInterfaceModule::getMainPage() {
  String html = F(
    "<!DOCTYPE html><html><head><meta charset='utf-8'><meta name='viewport' content='width=device-width,initial-scale=1'>"
    "<title>EAGLE Pentest</title><style>*{font-family:Arial}body{padding:16px}input,button{padding:8px;margin:4px}</style>"
    "</head><body><h2>EAGLE Pentest Web UI</h2>"
    "<div><h3>Port Scan</h3>Target IP: <input id=ip placeholder='192.168.1.1'>"
    " Start:<input id=s min=1 type=number value=1> End:<input id=e min=1 type=number value=1024>"
    " <button onclick=quick()>Quick</button><button onclick=full()>Range</button>"
    " <pre id=log style='background:#111;color:#0f0;padding:8px;height:160px;overflow:auto'></pre></div>"
    "<div><h3>Vulnerability Scan</h3>URL: <input id=url placeholder='http://target/'>"
    " <button onclick=vuln()>Start</button></div>"
    "<script>"
    "const log=t=>{const el=document.getElementById('log');el.textContent+=t+'\n';el.scrollTop=el.scrollHeight;}"
    "function quick(){fetch('/api/portscan/start?quick=1&target='+encodeURIComponent(ip.value)).then(r=>r.json()).then(j=>log(JSON.stringify(j)))}"
    "function full(){fetch('/api/portscan/start?target='+encodeURIComponent(ip.value)+'&start='+s.value+'&end='+e.value).then(r=>r.json()).then(j=>log(JSON.stringify(j)))}"
    "function vuln(){fetch('/api/vulnscan/start?url='+encodeURIComponent(url.value)).then(r=>r.json()).then(j=>log(JSON.stringify(j)))}"
    "const ws=new WebSocket((location.protocol==='https:'?'wss':'ws')+'://'+location.host+'/ws');"
    "ws.onmessage=e=>{try{const j=JSON.parse(e.data);if(j.event==='port'){log('Port '+j.port+': '+j.status)} if(j.event==='progress'){log(j.target+': '+j.progress+'% '+j.status)} if(j.event==='vuln'){log('VULN '+j.severity+': '+j.description)}}catch(err){log(e.data)}}"
    "</script></body></html>");
  return html;
}

String PentestWebInterfaceModule::getPortScanPage() { return getMainPage(); }
String PentestWebInterfaceModule::getVulnScanPage() { return getMainPage(); }
String PentestWebInterfaceModule::getNetworkScanPage() { return getMainPage(); }
String PentestWebInterfaceModule::getBruteForcePage() { return getMainPage(); }
String PentestWebInterfaceModule::getMitMPage() { return getMainPage(); }
String PentestWebInterfaceModule::getFuzzingPage() { return getMainPage(); }
String PentestWebInterfaceModule::getReportsPage() { return getMainPage(); }
String PentestWebInterfaceModule::getConfigPage() { return getMainPage(); }

void PentestWebInterfaceModule::setupAPI() {
  // Status
  server->on("/api/status", HTTP_GET, [this](AsyncWebServerRequest* request){
    StaticJsonDocument<256> doc;
    doc["board"] = "ESP32 DevKit";
    doc["ip"] = WiFi.softAPIP().toString();
    doc["ap_ssid"] = apSSID;
    String out; serializeJson(doc, out);
    request->send(200, "application/json", out);
  });

  // Start port scan
  server->on("/api/portscan/start", HTTP_GET, [this](AsyncWebServerRequest* request){
    if (!portScanner) { request->send(500, "application/json", jsonStatus("error","scanner not ready")); return; }
    String target = request->getParam("target", false) ? request->getParam("target")->value() : String("");
    if (!target.length()) { request->send(400, "application/json", jsonStatus("error","missing target")); return; }
    portScanner->setTarget(target);
    bool started = false;
    if (request->hasParam("quick")) {
      started = portScanner->startQuickScan();
    } else {
      uint16_t s = request->hasParam("start") ? request->getParam("start")->value().toInt() : 1;
      uint16_t e = request->hasParam("end") ? request->getParam("end")->value().toInt() : 1024;
      portScanner->setPortRange(s, e);
      started = portScanner->startScan();
    }
    request->send(started ? 200 : 409, "application/json", jsonStatus(started?"ok":"busy"));
  });

  server->on("/api/portscan/stop", HTTP_GET, [this](AsyncWebServerRequest* request){
    if (portScanner) portScanner->stopScan();
    request->send(200, "application/json", jsonStatus("ok","stopped"));
  });

  server->on("/api/portscan/results", HTTP_GET, [this](AsyncWebServerRequest* request){
    if (!portScanner) { request->send(500, "application/json", jsonStatus("error","scanner not ready")); return; }
    StaticJsonDocument<2048> doc;
    auto arr = doc.createNestedArray("open");
    for (auto p : portScanner->getOpenPorts()) arr.add(p);
    auto det = doc.createNestedArray("details");
    for (auto r : portScanner->getDetailedResults()) {
      JsonObject o = det.createNestedObject();
      o["port"] = r.port; o["status"] = r.status; o["service"] = r.service; o["version"] = r.version; o["rt"] = r.responseTime; o["vuln"] = r.isVulnerable;
    }
    String out; serializeJson(doc, out);
    request->send(200, "application/json", out);
  });

  // Vulnerability scan
  server->on("/api/vulnscan/start", HTTP_GET, [this](AsyncWebServerRequest* request){
    if (!vulnScanner) { request->send(500, "application/json", jsonStatus("error","scanner not ready")); return; }
    if (request->hasParam("url")) {
      String url = request->getParam("url")->value();
      vulnScanner->setTargetURL(url);
    }
    if (request->hasParam("ip")) {
      String ip = request->getParam("ip")->value();
      vulnScanner->setTarget(ip);
    }
    bool ok = vulnScanner->startScan();
    request->send(ok ? 200 : 409, "application/json", jsonStatus(ok?"ok":"busy"));
  });

  server->on("/api/vulnscan/results", HTTP_GET, [this](AsyncWebServerRequest* request){
    if (!vulnScanner) { request->send(500, "application/json", jsonStatus("error","scanner not ready")); return; }
    StaticJsonDocument<2048> doc;
    auto arr = doc.createNestedArray("vulnerabilities");
    for (auto &v : vulnScanner->getVulnerabilities()) {
      JsonObject o = arr.createNestedObject();
      o["cve"] = v.cve; o["desc"] = v.description; o["sev"] = v.severity; o["exploit"] = v.exploit_code; o["ts"] = v.timestamp;
    }
    String out; serializeJson(doc, out);
    request->send(200, "application/json", out);
  });
}

void PentestWebInterfaceModule::setupWebSocket() {
  if (!g_ws) {
    g_ws = new AsyncWebSocket("/ws");
    g_ws->onEvent([this](AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len){
      onWebSocketEvent(server, client, type, arg, data, len);
    });
  }
  server->addHandler(g_ws);
}

void PentestWebInterfaceModule::onWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  if (type == WS_EVT_CONNECT) {
    // send hello
    StaticJsonDocument<128> doc; doc["event"] = "hello"; doc["ap"] = apSSID; String out; serializeJson(doc, out); client->text(out);
  }
}

void PentestWebInterfaceModule::sendWebSocketMessage(String message) {
  if (g_ws) {
    g_ws->textAll(message);
  }
}

void PentestWebInterfaceModule::setupFileHandlers() {
  // Optional: serve listing and uploads via AsyncWebServerRequest callbacks
}

void PentestWebInterfaceModule::handleFileUpload(AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final) {}
void PentestWebInterfaceModule::handleFileDownload(AsyncWebServerRequest *request) { request->send(404); }
void PentestWebInterfaceModule::handleFileList(AsyncWebServerRequest *request) { request->send(404); }
void PentestWebInterfaceModule::handleFileDelete(AsyncWebServerRequest *request) { request->send(404); }

bool PentestWebInterfaceModule::isAuthenticated(AsyncWebServerRequest *request) { return true; }
String PentestWebInterfaceModule::generateCSRFToken() { return String("csrf"); }
bool PentestWebInterfaceModule::validateCSRFToken(String token) { return true; }

void PentestWebInterfaceModule::updatePortScanProgress(int progress, String status) {
  StaticJsonDocument<128> doc; doc["event"] = "progress"; doc["target"] = "portscan"; doc["progress"] = progress; doc["status"] = status; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}

void PentestWebInterfaceModule::updateVulnScanProgress(int progress, String status) {
  StaticJsonDocument<128> doc; doc["event"] = "progress"; doc["target"] = "vulnscan"; doc["progress"] = progress; doc["status"] = status; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}

void PentestWebInterfaceModule::updateNetworkScanProgress(int progress, String status) {
  StaticJsonDocument<128> doc; doc["event"] = "progress"; doc["target"] = "netscan"; doc["progress"] = progress; doc["status"] = status; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}

void PentestWebInterfaceModule::addVulnerability(Vulnerability vuln) {
  StaticJsonDocument<256> doc; doc["event"] = "vuln"; doc["severity"] = vuln.severity; doc["description"] = vuln.description; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}

void PentestWebInterfaceModule::addOpenPort(int port, String service) {
  StaticJsonDocument<128> doc; doc["event"] = "port"; doc["port"] = port; doc["service"] = service; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}

void PentestWebInterfaceModule::addNetworkHost(NetworkHost host) {
  StaticJsonDocument<192> doc; doc["event"] = "host"; doc["ip"] = host.ip; doc["mac"] = host.mac; String out; serializeJson(doc, out); sendWebSocketMessage(out);
}