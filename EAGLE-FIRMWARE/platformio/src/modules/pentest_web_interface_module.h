#pragma once

#include <Arduino.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <DNSServer.h>
#include <ArduinoJson.h>
#include "core/module_manager.h"
#include "port_scanner_module.h"
#include "vulnerability_scanner_module.h"

class PentestWebInterfaceModule : public IModule {
private:
    AsyncWebServer* server;
    DNSServer* dnsServer;
    bool isRunning;
    String apSSID;
    String apPassword;
    IPAddress apIP;
    
    // References to other modules
    PortScannerModule* portScanner;
    VulnerabilityScannerModule* vulnScanner;
    
    // Web interface pages
    String getMainPage();
    String getPortScanPage();
    String getVulnScanPage();
    String getNetworkScanPage();
    String getBruteForcePage();
    String getMitMPage();
    String getFuzzingPage();
    String getReportsPage();
    String getConfigPage();
    
    // API endpoints
    void setupAPI();
    void handleAPIStatus(AsyncWebServerRequest *request);
    void handleAPIPortScan(AsyncWebServerRequest *request);
    void handleAPIVulnScan(AsyncWebServerRequest *request);
    void handleAPINetworkScan(AsyncWebServerRequest *request);
    void handleAPIBruteForce(AsyncWebServerRequest *request);
    void handleAPIMitM(AsyncWebServerRequest *request);
    void handleAPIFuzzing(AsyncWebServerRequest *request);
    void handleAPIReports(AsyncWebServerRequest *request);
    void handleAPIConfig(AsyncWebServerRequest *request);
    
    // WebSocket for real-time updates
    void setupWebSocket();
    void onWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len);
    void sendWebSocketMessage(String message);
    
    // File management
    void setupFileHandlers();
    void handleFileUpload(AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final);
    void handleFileDownload(AsyncWebServerRequest *request);
    void handleFileList(AsyncWebServerRequest *request);
    void handleFileDelete(AsyncWebServerRequest *request);
    
    // Security
    bool isAuthenticated(AsyncWebServerRequest *request);
    String generateCSRFToken();
    bool validateCSRFToken(String token);
    
    // Real-time updates
    void updatePortScanProgress(int progress, String status);
    void updateVulnScanProgress(int progress, String status);
    void updateNetworkScanProgress(int progress, String status);
    void addVulnerability(Vulnerability vuln);
    void addOpenPort(int port, String service);
    void addNetworkHost(NetworkHost host);
    
public:
    PentestWebInterfaceModule();
    ~PentestWebInterfaceModule();
    
    const char* getName() const override { return "pentest_web_interface"; }
    void setup() override;
    void loop() override;
    
    // Initialization
    bool begin(bool apMode = true);
    void stop();
    bool isActive() { return isRunning; }
    
    // Configuration
    void setAPCredentials(String ssid, String password);
    void setAPIP(IPAddress ip);
    
    // Module integration
    void setPortScanner(PortScannerModule* scanner);
    void setVulnScanner(VulnerabilityScannerModule* scanner);
    
    // Reports
    void generateWebReport();
    void exportWebReport(String format);
    
    // Callbacks
    std::function<void(String action, JsonObject data)> onWebAction;
    std::function<void(String message)> onWebMessage;
};
